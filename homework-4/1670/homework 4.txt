// 交通信号灯的枚举
enum TrafficLight {
    Red,
    Yellow,
    Green,
}

// 交通信号灯的trait，包含一个返回时间的方法
trait Duration {
    fn duration(&self) -> u32;
}

// 为交通信号灯实现trait
impl Duration for TrafficLight {
    fn duration(&self) -> u32 {
        match self {
            TrafficLight::Red => 30, // 红灯持续30秒
            TrafficLight::Yellow => 5, // 黄灯持续5秒
            TrafficLight::Green => 25, // 绿灯持续25秒
        }
    }
}

// 为u32类型的整数集合求和的函数，溢出时返回None
fn sum_numbers(numbers: &[u32]) -> Option<u32> {
    numbers.iter().try_fold(0u32, |acc, &x| acc.checked_add(x))
}

// 泛型约束trait，用于计算面积
trait Area {
    fn area(&self) -> f64;
}

// 实现圆形的面积计算
struct Circle {
    radius: f64,
}

impl Area for Circle {
    fn area(&self) -> f64 {
        std::f64::consts::PI * self.radius * self.radius
    }
}

// 实现三角形的面积计算
struct Triangle {
    base: f64,
    height: f64,
}

impl Area for Triangle {
    fn area(&self) -> f64 {
        0.5 * self.base * self.height
    }
}

// 实现正方形的面积计算
struct Square {
    side: f64,
}

impl Area for Square {
    fn area(&self) -> f64 {
        self.side * self.side
    }
}

// 打印图形面积的泛型函数
fn print_area<T: Area>(shape: T) {
    println!("The area is: {}", shape.area());
}

fn main() {
    // 示例：交通信号灯的持续时间
    let red_light = TrafficLight::Red;
    println!("Duration of red light: {} seconds", red_light.duration());

    // 示例：求和函数
    let numbers = vec![1, 2, 3, u32::MAX];
    match sum_numbers(&numbers) {
        Some(sum) => println!("The sum is: {}", sum),
        None => println!("Overflow occurred"),
    }

    // 示例：打印不同图形的面积
    let circle = Circle { radius: 5.0 };
    let triangle = Triangle { base: 4.0, height: 3.0 };
    let square = Square { side: 2.0 };

    print_area(circle);
    print_area(triangle);
    print_area(square);
}
